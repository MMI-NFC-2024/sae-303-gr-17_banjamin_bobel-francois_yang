---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import departementsUrl from "../assets/departements.geojson?url";
import garesUrl from "../assets/gares-de-voyageurs.geojson?url";
import sitesUrl from "../assets/datatourisme-tour.json?url";
---

<Layout title="Cartographie - Tourisme en Train">
  <Header />

  <main class="min-h-screen bg-gray-50">
    <section
      class="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-16"
    >
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 class="text-4xl md:text-5xl font-bold mb-4">
          Cartographie du r√©seau ferroviaire
        </h1>
        <p class="text-xl text-blue-100 max-w-3xl">
          La France dispose d&apos;un r√©seau ferroviaire dense qui relie de
          nombreuses gares.
        </p>
      </div>
    </section>

    <section class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="flex gap-4 items-center">
          <label for="affichage" class="text-sm font-medium">Afficher :</label>
          <select id="affichage" class="px-4 py-2 border rounded-lg">
            <option value="les-deux">Les deux</option>
            <option value="gares">Gares uniquement</option>
            <option value="sites">Sites uniquement</option>
          </select>
          <div id="stats" class="text-sm text-gray-600"></div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div id="map" class="h-[700px]"></div>
      </div>

      <div class="mt-12 bg-blue-50 rounded-lg p-8">
        <h2 class="text-2xl font-bold mb-4">Conclusion</h2>
        <p class="text-gray-700">
          Cette cartographie r√©v√®le une couverture dense du territoire fran√ßais.
        </p>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
/>
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css"
/>
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css"
/>

<script define:vars={{ departementsUrl, garesUrl, sitesUrl }}>
  async function initMap() {
    try {
      const mapDiv = document.getElementById("map");
      mapDiv.innerHTML =
        '<div class="flex items-center justify-center h-full"><p>‚è≥ Chargement...</p></div>';

      await loadScript("https://unpkg.com/leaflet@1.9.4/dist/leaflet.js");
      await loadScript(
        "https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js",
      );

      const [departementsRes, garesRes, sitesRes] = await Promise.all([
        fetch(departementsUrl).then((r) => r.json()),
        fetch(garesUrl).then((r) => r.json()),
        fetch(sitesUrl).then((r) => r.json()), // JSON, PAS text() !
      ]);

      console.log("Sites charg√©s:", sitesRes.length);

      mapDiv.innerHTML = "";
      const map = L.map("map").setView([46.8, 2.5], 6);

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "¬© OpenStreetMap",
        maxZoom: 18,
      }).addTo(map);

      L.geoJSON(departementsRes, {
        style: { color: "#888", weight: 1, fillOpacity: 0 },
      }).addTo(map);

      const garesLayer = L.layerGroup();
      const sitesCluster = L.markerClusterGroup({ maxClusterRadius: 50 });

      let garesCount = 0;
      garesRes.features.forEach((f) => {
        if (f.geometry?.coordinates?.length >= 2) {
          const [lon, lat] = f.geometry.coordinates;
          if (!isNaN(lon) && !isNaN(lat)) {
            const m = L.circleMarker([lat, lon], {
              radius: 5,
              fillColor: "#3b82f6",
              color: "white",
              weight: 1.5,
              fillOpacity: 0.9,
            });
            m.bindPopup(`<strong>üöâ ${f.properties?.nom || "Gare"}</strong>`);
            m.addTo(garesLayer);
            garesCount++;
          }
        }
      });

      let sitesCount = 0;
      sitesRes.forEach((s) => {
        const lon = parseFloat(s.Longitude || s.longitude);
        const lat = parseFloat(s.Latitude || s.latitude);

        if (!isNaN(lon) && !isNaN(lat) && lon !== 0 && lat !== 0) {
          const m = L.circleMarker([lat, lon], {
            radius: 4,
            fillColor: "#ef4444",
            color: "white",
            weight: 1,
            fillOpacity: 0.8,
          });
          m.bindPopup(`<strong>üìç ${s.Nom_du_POI || s.nom || "Site"}</strong>`);
          sitesCluster.addLayer(m);
          sitesCount++;
        }
      });

      garesLayer.addTo(map);
      sitesCluster.addTo(map);

      updateStats(garesCount, sitesCount);

      document.getElementById("affichage").addEventListener("change", (e) => {
        if (e.target.value === "les-deux") {
          map.addLayer(garesLayer);
          map.addLayer(sitesCluster);
          updateStats(garesCount, sitesCount);
        } else if (e.target.value === "gares") {
          map.addLayer(garesLayer);
          map.removeLayer(sitesCluster);
          updateStats(garesCount, 0);
        } else {
          map.removeLayer(garesLayer);
          map.addLayer(sitesCluster);
          updateStats(0, sitesCount);
        }
      });
    } catch (err) {
      console.error(err);
      document.getElementById("map").innerHTML =
        `<div class="p-4 text-red-700">‚ùå ${err.message}</div>`;
    }
  }

  function loadScript(src) {
    return new Promise((resolve, reject) => {
      if (document.querySelector(`script[src="${src}"]`)) return resolve();
      const s = document.createElement("script");
      s.src = src;
      s.onload = resolve;
      s.onerror = reject;
      document.head.appendChild(s);
    });
  }

  function updateStats(g, s) {
    const p = [];
    if (g > 0) p.push(`üöâ ${g} gares`);
    if (s > 0) p.push(`üìç ${s} sites`);
    document.getElementById("stats").textContent = p.join(" ‚Ä¢ ");
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initMap);
  } else {
    initMap();
  }
</script>
