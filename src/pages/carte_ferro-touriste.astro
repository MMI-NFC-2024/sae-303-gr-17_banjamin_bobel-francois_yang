---
import Layout from '../layouts/Layout.astro';
import departementsUrl from '../assets/departements.geojson?url';
import garesUrl from '../assets/gares-de-voyageurs.geojson?url';
import sitesUrl from '../assets/datatourisme-tour.json?url';
---

<Layout title="Carte Ferro-Tourisme">
  <main class="min-h-screen bg-gradient-to-b from-blue-50 to-white">
    <section class="py-8 px-4 sm:px-6 lg:px-8 max-w-6xl mx-auto">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">
        Cartographie du r√©seau ferroviaire et des sites touristiques
      </h1>
      <p class="text-gray-700 mb-4">
        La France dispose d'un r√©seau ferroviaire dense qui relie de nombreuses gares √† des sites touristiques majeurs. 
        Visualiser cette couverture permet de comprendre l'accessibilit√© des destinations et d'identifier les zones bien desservies ou √† renforcer.
      </p>

      <div class="mb-4 flex gap-4 flex-wrap">
        <div>
          <label for="affichage" class="mr-2 font-medium">Afficher :</label>
          <select id="affichage" class="px-3 py-2 border rounded">
            <option value="les-deux">Les deux</option>
            <option value="gares">Gares uniquement</option>
            <option value="sites">Sites touristiques uniquement</option>
          </select>
        </div>
        <div class="text-sm text-gray-600 self-center" id="stats"></div>
      </div>

  <div id="map" class="bg-white rounded shadow h-[700px] overflow-hidden"></div>
      
      <div id="diag" class="mt-4 p-3 text-sm text-gray-700 bg-gray-50 rounded border border-gray-100">
        <strong>Diagnostics :</strong>
        <pre id="diag-log" class="whitespace-pre-wrap text-xs mt-2"></pre>
      </div>
    </section>
  </main>
</Layout>

<!-- CSS Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css" />

<script define:vars={{ departementsUrl, garesUrl, sitesUrl }}>
  function log(msg) {
    console.log(msg);
    const pre = document.getElementById('diag-log');
    if (pre) pre.textContent += msg + '\n';
  }

  async function initMap() {
    try {
      log('=== D√âBUT DU CHARGEMENT ===');
      
      const mapDiv = document.getElementById('map');
      if (!mapDiv) throw new Error('Container #map introuvable');
      
      mapDiv.innerHTML = '<div class="flex items-center justify-center h-full"><p class="text-gray-600">‚è≥ Chargement de Leaflet et des donn√©es‚Ä¶</p></div>';

      log('URLs:');
      log(`- D√©partements: ${departementsUrl}`);
      log(`- Gares: ${garesUrl}`);
      log(`- Sites: ${sitesUrl}`);

      // Charger Leaflet et le plugin de clustering
      log('Chargement de Leaflet...');
      await loadScript('https://unpkg.com/leaflet@1.9.4/dist/leaflet.js');
      await loadScript('https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js');
      log('‚úì Leaflet charg√©');

      // Charger les donn√©es
      log('Chargement des donn√©es...');
      const [departementsRes, garesRes, sitesRes] = await Promise.all([
        fetch(departementsUrl).then(r => {
          if (!r.ok) throw new Error(`D√©partements: ${r.status}`);
          return r.json();
        }),
        fetch(garesUrl).then(r => {
          if (!r.ok) throw new Error(`Gares: ${r.status}`);
          return r.json();
        }),
        fetch(sitesUrl).then(r => {
          if (!r.ok) throw new Error(`Sites: ${r.status}`);
          return r.json();
        }),
      ]);

      log(`‚úì Donn√©es charg√©es:`);
      log(`  - D√©partements: ${departementsRes.features?.length || 0} features`);
      log(`  - Gares: ${garesRes.features?.length || 0} features`);
      log(`  - Sites: ${Array.isArray(sitesRes) ? sitesRes.length : 0} √©l√©ments`);

      // Initialiser la carte
      mapDiv.innerHTML = '';
      const map = L.map('map').setView([46.8, 2.5], 6); // Centre France

      // Ajouter les tuiles OpenStreetMap
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 18
      }).addTo(map);

      // Ajouter les contours des d√©partements
      L.geoJSON(departementsRes, {
        style: {
          color: '#888',
          weight: 1,
          fillColor: 'transparent',
          fillOpacity: 0
        }
      }).addTo(map);

      // Cr√©er les groupes de markers
      const garesLayer = L.layerGroup();
      const sitesClusterGroup = L.markerClusterGroup({
        maxClusterRadius: 50,
        spiderfyOnMaxZoom: true,
        showCoverageOnHover: false,
        zoomToBoundsOnClick: true
      });

      // Ajouter les gares (cercles bleus)
      let garesCount = 0;
      garesRes.features.forEach(feature => {
        if (feature.geometry?.coordinates?.length >= 2) {
          const [lon, lat] = feature.geometry.coordinates;
          if (!isNaN(lon) && !isNaN(lat)) {
            const marker = L.circleMarker([lat, lon], {
              radius: 5,
              fillColor: '#3b82f6',
              color: 'white',
              weight: 1.5,
              fillOpacity: 0.9
            });
            
            const nom = feature.properties?.nom || feature.properties?.libelle || 'Gare';
            marker.bindPopup(`<strong>üöâ ${nom}</strong>`);
            marker.addTo(garesLayer);
            garesCount++;
          }
        }
      });
      log(`‚úì ${garesCount} gares ajout√©es`);

      // Ajouter les sites touristiques (cercles rouges avec clustering)
      let sitesCount = 0;
      sitesRes.forEach(site => {
        const lon = parseFloat(site.Longitude || site.longitude);
        const lat = parseFloat(site.Latitude || site.latitude);
        
        if (!isNaN(lon) && !isNaN(lat) && lon !== 0 && lat !== 0) {
          const marker = L.circleMarker([lat, lon], {
            radius: 4,
            fillColor: '#ef4444',
            color: 'white',
            weight: 1,
            fillOpacity: 0.8
          });
          
          const nom = site.Nom_du_POI || site.nom || 'Site touristique';
          const type = site.Categories_de_POI || site.type || '';
          const commune = site.Code_postal_et_commune || site.commune || '';
          
          let popupContent = `<strong>üìç ${nom}</strong>`;
          if (type) popupContent += `<br>üèõÔ∏è ${type}`;
          if (commune) popupContent += `<br>üìÆ ${commune}`;
          
          marker.bindPopup(popupContent);
          sitesClusterGroup.addLayer(marker);
          sitesCount++;
        }
      });
      log(`‚úì ${sitesCount} sites touristiques ajout√©s (avec clustering)`);

      // Ajouter les layers √† la carte par d√©faut
      garesLayer.addTo(map);
      sitesClusterGroup.addTo(map);

      // Mettre √† jour les stats
      updateStats(garesCount, sitesCount);

      // G√©rer le changement d'affichage
      const selectAffichage = document.getElementById('affichage');
      selectAffichage.addEventListener('change', (e) => {
        const value = e.target.value;
        log(`Changement affichage: ${value}`);
        
        if (value === 'les-deux') {
          map.addLayer(garesLayer);
          map.addLayer(sitesClusterGroup);
          updateStats(garesCount, sitesCount);
        } else if (value === 'gares') {
          map.addLayer(garesLayer);
          map.removeLayer(sitesClusterGroup);
          updateStats(garesCount, 0);
        } else if (value === 'sites') {
          map.removeLayer(garesLayer);
          map.addLayer(sitesClusterGroup);
          updateStats(0, sitesCount);
        }
      });

      log('=== TERMIN√â ===');
      log('üí° Zoom sur la carte pour voir les d√©tails. Les sites sont group√©s automatiquement.');

    } catch (err) {
      console.error('Erreur:', err);
      log(`‚ùå ERREUR: ${err.message}`);
      
      const mapDiv = document.getElementById('map');
      if (mapDiv) {
        mapDiv.innerHTML = `
          <div class="p-4 text-red-700 bg-red-50 rounded h-full flex items-center justify-center">
            <div>
              <strong>‚ùå Erreur de chargement</strong>
              <p class="mt-2 text-sm">${err.message}</p>
              <p class="mt-2 text-xs text-gray-600">Consultez la console (F12).</p>
            </div>
          </div>
        `;
      }
    }
  }

  // Fonction utilitaire pour charger un script
  function loadScript(src) {
    return new Promise((resolve, reject) => {
      // V√©rifier si d√©j√† charg√©
      if (document.querySelector(`script[src="${src}"]`)) {
        resolve();
        return;
      }
      
      const script = document.createElement('script');
      script.src = src;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  // Mettre √† jour les statistiques affich√©es
  function updateStats(gares, sites) {
    const statsDiv = document.getElementById('stats');
    if (statsDiv) {
      const parts = [];
      if (gares > 0) parts.push(`üöâ ${gares} gares`);
      if (sites > 0) parts.push(`üìç ${sites} sites`);
      statsDiv.textContent = parts.join(' ‚Ä¢ ');
    }
  }

  // Lancer au chargement
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMap);
  } else {
    initMap();
  }
</script>
